import Head from "next/head";
import Image from "next/image";
import styled from "styled-components";
import SearchHeader from "./rootc/SearchHeader";
import Order from "./search/Order";
import StationRoot1 from "./rootc/StationRoot1";
import StationRoot2 from "./rootc/StationRoot2";
import StationRoot3 from "./rootc/StationRoot3";
import Start from "./rootc/Start";
import Destination from "./rootc/Destination";
import TimeTransfer from "./rootc/TimeTransfer";
import { useEffect, useState } from "react";
import SubwayLine from "./rootc/SubwayLine";

const Content1 = styled.div`
  z-index: 1;
  top: 0;
  left: 0;
  width: 100vw;
`;
const Contente2 = styled.div`
  background-color: white;
  overflow: scroll;
  display: flex;
  flex-direction: column;
  height: 100vh;
`;

export default function Root({ setPage, className }) {
  const [faster, setFaster] = useState();
  const [onlySubway, setOnlySubway] = useState();
  const [lessTransfer, setLessTransfer] = useState();
  const [currentOrder, setCurrentOrder] = useState("onlySubway"); // lessTransfer | faster

  let selectedPath; //css consol.log();찍어서 보고 어떻게 표현할지 수정

  if (currentOrder === "onlySubway") {
    selectedPath = onlySubway;
  }
  if (currentOrder === "lessTransfer") {
    selectedPath = lessTransfer;
  }
  if (currentOrder === "faster") {
    selectedPath = faster;
  }

  useEffect(() => {
    if (window.tmap && selectedPath) {
      window.tmap.drawData(selectedPath);
    }
  }, [selectedPath, currentOrder]);

  console.log("selectedPath : ", selectedPath);
  const totalTime = Math.floor(selectedPath?.totalTime / 60);
  const transferCount = selectedPath?.legs.find(
    (leg) => leg.mode === "TRANSFER"
  ).length;
  const fare = selectedPath?.fare.regular.totalFare;
  function chooseMode() {
    if (selectedPath?.legs.find((leg) => leg.mode === "BUS")) {
      return <div>{bus}</div>;
    } else if (selectedPath?.legs.find((leg) => leg.mode === "WALK")) {
      return <div>{walking}</div>;
    } else if (selectedPath?.legs.find((leg) => leg.mode === "WALK")) {
      return <div>{subway}</div>;
    } else return <div>경로없음</div>;
  }
  const transfertime =
    selectedPath?.legs.find((leg) => leg.mode === "TRANSFER")?.sectionTime / 60;
  const walking = selectedPath?.legs
    .find((leg) => leg.mode === "WALK")
    ?.steps.map((item) => {
      return <div>{item.description}</div>;
    });
  const bus = selectedPath?.legs
    .find((leg) => leg.mode === "BUS")
    ?.passStopList.stationList?.map((item) => {
      return <div>{item.stationName}</div>;
    });
  const subway = selectedPath?.legs
    .find((leg) => leg.mode === "SUBWAY")
    ?.passStopList.stationList?.map((item) => {
      return <div>{item.stationName}</div>;
    });
  const busNumber =
    selectedPath?.legs.find((leg) => leg.mode === "BUS").route || null;
  const subwayNumber =
    selectedPath?.legs.find((leg) => leg.mode === "SUBWAY")?.route || null;
  return (
    <div className={className}>
      <Head>
        <title>WMap</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Content1>
        <SearchHeader
          setPage={setPage}
          setFaster={setFaster}
          setOnlySubway={setOnlySubway}
          setLessTransfer={setLessTransfer}
        ></SearchHeader>
        <Order
          currentOrder={currentOrder}
          setCurrentOrder={setCurrentOrder}
        ></Order>
      </Content1>

      {selectedPath && (
        <Contente2>
          {/* exit, direction, quick, time, start, arrive */}
          <TimeTransfer
            time={totalTime}
            timeunit={"분"}
            transfer={transferCount}
            fare={fare}
          ></TimeTransfer>
          <Start startPlace={selectedPath?.legs[0].start.name}></Start>
          <StationRoot1
            start={selectedPath?.legs[0].start.name}
            direction={"3-4"}
            info={subwayNumber}
            time={Math.floor(selectedPath?.walkTime / 60)}
            arrive={selectedPath?.legs[0].end.name}
          ></StationRoot1>
          <StationRoot2
            start={selectedPath?.legs[0].start.name}
            direction={"3-4"}
            info={subwayNumber}
            time={transfertime}
            arrive={selectedPath?.legs[0].end.name}
          ></StationRoot2>
          <StationRoot1
            start={selectedPath?.legs[0].start.name}
            direction={"3-4"}
            info={subwayNumber}
            time={Math.floor(selectedPath?.walkTime / 60)}
            arrive={selectedPath?.legs[0].end.name}
          ></StationRoot1>

          <Destination
            finishPlace={
              selectedPath?.legs[selectedPath.legs.length - 1].end.name
            }
          ></Destination>
          {/* <Title title={data.name} options={data.option}></Title> */}
        </Contente2>
      )}
    </div>
  );
}
